name: Check MDN translation sync and send LINE notify

on:
  schedule:
    - cron: '0 4 * * *'  # 每天 12:00 台灣時間（UTC+8）
  workflow_dispatch:

jobs:
  check-and-notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout mdn/content
        uses: actions/checkout@v4
        with:
          repository: mdn/content
          path: content
          fetch-depth: 0

      - name: Checkout mdn/translated-content
        uses: actions/checkout@v4
        with:
          repository: mdn/translated-content
          path: translated-content
          fetch-depth: 0

      - name: Setup Node.js and install js-yaml
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install js-yaml

      - name: Compare sourceCommit and generate log
        run: |
          LOG_FILE="log.txt"
          > "$LOG_FILE"

          # 抓取翻譯檔案列表
          find translated-content/files/zh-tw -name '*.md' | while read -r file; do
            # 用 awk 抓 yaml header
            yaml_metadata=$(awk '/^---$/,/^---$/' "$file" | sed '1d;$d' | tr '\n' '\\n')
            
            source_commit=$(node -e "
              const yaml = require('js-yaml');
              try {
                const meta = yaml.load(process.argv[1]);
                console.log(meta?.l10n?.sourceCommit || '');
              } catch (e) {
                process.exit(0);
              }
            " "$yaml_metadata")

            if [ -z "$source_commit" ]; then
              continue
            fi

            relative_path=${file#translated-content/files/zh-tw}
            en_path="files/en-us$relative_path"
            en_file="content/$en_path"

            if [ ! -f "$en_file" ]; then
              continue
            fi

            latest_commit=$(git -C content log -n 1 --format=%H -- "$en_path")

            if [ "$source_commit" = "$latest_commit" ]; then
              continue
            fi

            distance=$(git -C content rev-list --count "$source_commit..$latest_commit" -- "$en_path")

            echo "$relative_path, $distance" >> "$LOG_FILE"
          done

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: mdn-l10n-outdated-log
          path: log.txt

      - name: Send LINE message via Messaging API
        if: success()
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        run: |
          if [ ! -s log.txt ]; then
            echo "No outdated files found."
            exit 0
          fi

          declare -A groups

          while IFS= read -r line; do
            path=$(echo "$line" | cut -d',' -f1 | xargs)
            distance=$(echo "$line" | cut -d',' -f2 | xargs)
            group=$(echo "$path" | cut -d'/' -f2)
            entry="• ${path}, ${distance}"

            if [ -z "${groups[$group]}" ]; then
              groups[$group]="$entry"
            else
              groups[$group]="${groups[$group]}"$'\n'"$entry"
            fi
          done < log.txt

          message="📢 MDN 翻譯更新提醒：\n\n"

          for key in "${!groups[@]}"; do
            message+="【${key}】\n${groups[$key]}\n\n"
          done

          total=$(wc -l < log.txt)
          message+="---\n總計未同步檔案：${total} 個\n"

          json_payload=$(jq -nc --arg text "$message" '{messages: [{type:"text", text:$text}]}')

          curl --fail -X POST https://api.line.me/v2/bot/message/broadcast \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $LINE_CHANNEL_ACCESS_TOKEN" \
            -d "$json_payload"
