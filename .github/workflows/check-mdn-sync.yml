name: Check MDN translation sync and send LINE notify

on:
  schedule:
    - cron: '0 4 * * *'  # 每天 12:00 台灣時間（UTC+8）
  workflow_dispatch:

jobs:
  check-and-notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout mdn/content
        uses: actions/checkout@v4
        with:
          repository: mdn/content
          path: content
          fetch-depth: 0  # 需要完整 git log

      - name: Checkout mdn/translated-content
        uses: actions/checkout@v4
        with:
          repository: mdn/translated-content
          path: translated-content

      - name: Set up Node.js + js-yaml
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install js-yaml
        run: npm install js-yaml

      - name: Compare sourceCommit and generate log
        run: |
          LOG_FILE="log.txt"
          > "$LOG_FILE"

          find translated-content/files/zh-tw -name '*.md' | while read -r file; do
            yaml_metadata=$(awk '/^---$/{y++} y==1' "$file")
            source_commit=$(node -e "
              const yaml = require('js-yaml');
              const meta = yaml.load(\`${yaml_metadata}\`);
              console.log(meta?.l10n?.sourceCommit || '');
            ")

            [ -z "$source_commit" ] && continue

            relative_path=${file#translated-content/files/zh-tw}
            en_path="files/en-us$relative_path"
            en_file="content/$en_path"

            [ ! -f "$en_file" ] && continue

            latest_commit=$(git -C content log -n 1 --format=%H -- "$en_path")

            [ "$source_commit" = "$latest_commit" ] && continue

            distance=$(git -C content rev-list --count "$source_commit..$latest_commit" -- "$en_path")

            echo "$relative_path, $distance" >> "$LOG_FILE"
          done

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: mdn-l10n-outdated-log
          path: log.txt

      - name: Format message and send LINE notification
        if: success()
        run: |
          if [ ! -s log.txt ]; then
            echo "No outdated files found."
            exit 0
          fi

          declare -A groups
          
          # 將換行符號直接儲存到變數中，而不是使用 \n
          NEWLINE=$'\n' 

          while IFS= read -r line; do
            path=$(echo "$line" | cut -d',' -f1 | xargs) # 去除空白
            distance=$(echo "$line" | cut -d',' -f2 | xargs)

            # 取第一層資料夾+第二層資料夾作為分類標題，例如 web/api
            prefix=$(echo "$path" | cut -d'/' -f2-3)

            # 沒有就放 Others
            if [ -z "$prefix" ]; then
              prefix="Others"
            fi

            # 使用 NEWLINE 變數來實現換行
            groups["$prefix"]+="${path}（+${distance}）${NEWLINE}"
          done < log.txt

          # 使用 printf 來構建包含實際換行符號的訊息
          message=$(printf "📢 MDN 翻譯更新提醒：%s%s" "$NEWLINE" "$NEWLINE")

          for key in "${!groups[@]}"; do
            message+=$(printf "【%s】%s" "$key" "$NEWLINE")
            message+="${groups[$key]}"
            message+=$(printf "%s" "$NEWLINE")
          done

          total=$(wc -l < log.txt)
          message+=$(printf "---%s總計未同步檔案：%s 個" "$NEWLINE" "$total")

          # 直接將 message 變數傳遞給 jq，jq 會正確處理其中的換行符號
          json_payload=$(jq -nc --arg text "$message" '{messages: [{type:"text", text:$text}]}')

          curl -X POST https://api.line.me/v2/bot/message/broadcast \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
            -d "$json_payload"
